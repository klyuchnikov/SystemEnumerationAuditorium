#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.296
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SystemEnumerationAuditorium
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAbridgement(Abridgement instance);
    partial void UpdateAbridgement(Abridgement instance);
    partial void DeleteAbridgement(Abridgement instance);
    partial void InsertAuditoriums(Auditoriums instance);
    partial void UpdateAuditoriums(Auditoriums instance);
    partial void DeleteAuditoriums(Auditoriums instance);
    partial void InsertDisciplines(Disciplines instance);
    partial void UpdateDisciplines(Disciplines instance);
    partial void DeleteDisciplines(Disciplines instance);
    partial void InsertDiscipTeachers(DiscipTeachers instance);
    partial void UpdateDiscipTeachers(DiscipTeachers instance);
    partial void DeleteDiscipTeachers(DiscipTeachers instance);
    partial void InsertEducation(Education instance);
    partial void UpdateEducation(Education instance);
    partial void DeleteEducation(Education instance);
    partial void InsertFaculty(Faculty instance);
    partial void UpdateFaculty(Faculty instance);
    partial void DeleteFaculty(Faculty instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertPeriods(Periods instance);
    partial void UpdatePeriods(Periods instance);
    partial void DeletePeriods(Periods instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertScheduleException(ScheduleException instance);
    partial void UpdateScheduleException(ScheduleException instance);
    partial void DeleteScheduleException(ScheduleException instance);
    partial void InsertTeachers(Teachers instance);
    partial void UpdateTeachers(Teachers instance);
    partial void DeleteTeachers(Teachers instance);
    #endregion
		
		public DataDataContext() : 
				base(global::SystemEnumerationAuditorium.Properties.Settings.Default.DatabaseConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Abridgement> Abridgement
		{
			get
			{
				return this.GetTable<Abridgement>();
			}
		}
		
		public System.Data.Linq.Table<Auditoriums> Auditoriums
		{
			get
			{
				return this.GetTable<Auditoriums>();
			}
		}
		
		public System.Data.Linq.Table<Disciplines> Disciplines
		{
			get
			{
				return this.GetTable<Disciplines>();
			}
		}
		
		public System.Data.Linq.Table<DiscipTeachers> DiscipTeachers
		{
			get
			{
				return this.GetTable<DiscipTeachers>();
			}
		}
		
		public System.Data.Linq.Table<Education> Education
		{
			get
			{
				return this.GetTable<Education>();
			}
		}
		
		public System.Data.Linq.Table<Faculty> Faculty
		{
			get
			{
				return this.GetTable<Faculty>();
			}
		}
		
		public System.Data.Linq.Table<Group> Group
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Location> Location
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Periods> Periods
		{
			get
			{
				return this.GetTable<Periods>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedule
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<ScheduleException> ScheduleException
		{
			get
			{
				return this.GetTable<ScheduleException>();
			}
		}
		
		public System.Data.Linq.Table<Teachers> Teachers
		{
			get
			{
				return this.GetTable<Teachers>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertTeacher")]
		public int InsertTeacher([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(20)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertAuditorium")]
		public int InsertAuditorium([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="Int")] System.Nullable<int> number, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Capacity", DbType="Int")] System.Nullable<int> capacity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AvailabilityProjector", DbType="NVarChar(20)")] string availabilityProjector, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumbComp", DbType="Int")] System.Nullable<int> numbComp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="QualityComp", DbType="NVarChar(20)")] string qualityComp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), number, capacity, availabilityProjector, numbComp, qualityComp);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Abridgement")]
	public partial class Abridgement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _source;
		
		private string _abridged;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnsourceChanging(string value);
    partial void OnsourceChanged();
    partial void OnabridgedChanging(string value);
    partial void OnabridgedChanged();
    #endregion
		
		public Abridgement()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source", DbType="NVarChar(50)")]
		public string source
		{
			get
			{
				return this._source;
			}
			set
			{
				if ((this._source != value))
				{
					this.OnsourceChanging(value);
					this.SendPropertyChanging();
					this._source = value;
					this.SendPropertyChanged("source");
					this.OnsourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abridged", DbType="NVarChar(50)")]
		public string abridged
		{
			get
			{
				return this._abridged;
			}
			set
			{
				if ((this._abridged != value))
				{
					this.OnabridgedChanging(value);
					this.SendPropertyChanging();
					this._abridged = value;
					this.SendPropertyChanged("abridged");
					this.OnabridgedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Auditoriums")]
	public partial class Auditoriums : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Auditorium;
		
		private string _Number;
		
		private System.Nullable<int> _Capacity;
		
		private System.Nullable<int> _NumbComp;
		
		private string _QualityComp;
		
		private string _AvailabilityProjector;
		
		private System.Nullable<int> _ID_Location;
		
		private EntitySet<Schedule> _Schedule;
		
		private EntitySet<ScheduleException> _ScheduleException;
		
		private EntityRef<Location> _Location;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_AuditoriumChanging(int value);
    partial void OnID_AuditoriumChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnNumbCompChanging(System.Nullable<int> value);
    partial void OnNumbCompChanged();
    partial void OnQualityCompChanging(string value);
    partial void OnQualityCompChanged();
    partial void OnAvailabilityProjectorChanging(string value);
    partial void OnAvailabilityProjectorChanged();
    partial void OnID_LocationChanging(System.Nullable<int> value);
    partial void OnID_LocationChanged();
    #endregion
		
		public Auditoriums()
		{
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			this._ScheduleException = new EntitySet<ScheduleException>(new Action<ScheduleException>(this.attach_ScheduleException), new Action<ScheduleException>(this.detach_ScheduleException));
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Auditorium", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Auditorium
		{
			get
			{
				return this._ID_Auditorium;
			}
			set
			{
				if ((this._ID_Auditorium != value))
				{
					this.OnID_AuditoriumChanging(value);
					this.SendPropertyChanging();
					this._ID_Auditorium = value;
					this.SendPropertyChanged("ID_Auditorium");
					this.OnID_AuditoriumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumbComp", DbType="Int")]
		public System.Nullable<int> NumbComp
		{
			get
			{
				return this._NumbComp;
			}
			set
			{
				if ((this._NumbComp != value))
				{
					this.OnNumbCompChanging(value);
					this.SendPropertyChanging();
					this._NumbComp = value;
					this.SendPropertyChanged("NumbComp");
					this.OnNumbCompChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityComp", DbType="NVarChar(50)")]
		public string QualityComp
		{
			get
			{
				return this._QualityComp;
			}
			set
			{
				if ((this._QualityComp != value))
				{
					this.OnQualityCompChanging(value);
					this.SendPropertyChanging();
					this._QualityComp = value;
					this.SendPropertyChanged("QualityComp");
					this.OnQualityCompChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailabilityProjector", DbType="NVarChar(50)")]
		public string AvailabilityProjector
		{
			get
			{
				return this._AvailabilityProjector;
			}
			set
			{
				if ((this._AvailabilityProjector != value))
				{
					this.OnAvailabilityProjectorChanging(value);
					this.SendPropertyChanging();
					this._AvailabilityProjector = value;
					this.SendPropertyChanged("AvailabilityProjector");
					this.OnAvailabilityProjectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Location", DbType="Int")]
		public System.Nullable<int> ID_Location
		{
			get
			{
				return this._ID_Location;
			}
			set
			{
				if ((this._ID_Location != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_LocationChanging(value);
					this.SendPropertyChanging();
					this._ID_Location = value;
					this.SendPropertyChanged("ID_Location");
					this.OnID_LocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Auditoriums_Schedule", Storage="_Schedule", ThisKey="ID_Auditorium", OtherKey="ID_Auditorium")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Auditoriums_ScheduleException", Storage="_ScheduleException", ThisKey="ID_Auditorium", OtherKey="ID_Auditorium")]
		public EntitySet<ScheduleException> ScheduleException
		{
			get
			{
				return this._ScheduleException;
			}
			set
			{
				this._ScheduleException.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Auditoriums", Storage="_Location", ThisKey="ID_Location", OtherKey="ID_Location", IsForeignKey=true, DeleteRule="CASCADE")]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Auditoriums.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Auditoriums.Add(this);
						this._ID_Location = value.ID_Location;
					}
					else
					{
						this._ID_Location = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Auditoriums = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Auditoriums = null;
		}
		
		private void attach_ScheduleException(ScheduleException entity)
		{
			this.SendPropertyChanging();
			entity.Auditoriums = this;
		}
		
		private void detach_ScheduleException(ScheduleException entity)
		{
			this.SendPropertyChanging();
			entity.Auditoriums = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Disciplines")]
	public partial class Disciplines : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Discipline;
		
		private string _Name;
		
		private EntitySet<DiscipTeachers> _DiscipTeachers;
		
		private EntitySet<Schedule> _Schedule;
		
		private EntitySet<ScheduleException> _ScheduleException;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_DisciplineChanging(int value);
    partial void OnID_DisciplineChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Disciplines()
		{
			this._DiscipTeachers = new EntitySet<DiscipTeachers>(new Action<DiscipTeachers>(this.attach_DiscipTeachers), new Action<DiscipTeachers>(this.detach_DiscipTeachers));
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			this._ScheduleException = new EntitySet<ScheduleException>(new Action<ScheduleException>(this.attach_ScheduleException), new Action<ScheduleException>(this.detach_ScheduleException));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Discipline", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Discipline
		{
			get
			{
				return this._ID_Discipline;
			}
			set
			{
				if ((this._ID_Discipline != value))
				{
					this.OnID_DisciplineChanging(value);
					this.SendPropertyChanging();
					this._ID_Discipline = value;
					this.SendPropertyChanged("ID_Discipline");
					this.OnID_DisciplineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disciplines_DiscipTeachers", Storage="_DiscipTeachers", ThisKey="ID_Discipline", OtherKey="ID_Discipline")]
		public EntitySet<DiscipTeachers> DiscipTeachers
		{
			get
			{
				return this._DiscipTeachers;
			}
			set
			{
				this._DiscipTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disciplines_Schedule", Storage="_Schedule", ThisKey="ID_Discipline", OtherKey="ID_Discipline")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disciplines_ScheduleException", Storage="_ScheduleException", ThisKey="ID_Discipline", OtherKey="ID_Discipline")]
		public EntitySet<ScheduleException> ScheduleException
		{
			get
			{
				return this._ScheduleException;
			}
			set
			{
				this._ScheduleException.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DiscipTeachers(DiscipTeachers entity)
		{
			this.SendPropertyChanging();
			entity.Disciplines = this;
		}
		
		private void detach_DiscipTeachers(DiscipTeachers entity)
		{
			this.SendPropertyChanging();
			entity.Disciplines = null;
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Disciplines = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Disciplines = null;
		}
		
		private void attach_ScheduleException(ScheduleException entity)
		{
			this.SendPropertyChanging();
			entity.Disciplines = this;
		}
		
		private void detach_ScheduleException(ScheduleException entity)
		{
			this.SendPropertyChanging();
			entity.Disciplines = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscipTeachers")]
	public partial class DiscipTeachers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _ID_Discipline;
		
		private System.Nullable<int> _ID_Teacher;
		
		private EntityRef<Disciplines> _Disciplines;
		
		private EntityRef<Teachers> _Teachers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnID_DisciplineChanging(System.Nullable<int> value);
    partial void OnID_DisciplineChanged();
    partial void OnID_TeacherChanging(System.Nullable<int> value);
    partial void OnID_TeacherChanged();
    #endregion
		
		public DiscipTeachers()
		{
			this._Disciplines = default(EntityRef<Disciplines>);
			this._Teachers = default(EntityRef<Teachers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Discipline", DbType="Int")]
		public System.Nullable<int> ID_Discipline
		{
			get
			{
				return this._ID_Discipline;
			}
			set
			{
				if ((this._ID_Discipline != value))
				{
					if (this._Disciplines.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_DisciplineChanging(value);
					this.SendPropertyChanging();
					this._ID_Discipline = value;
					this.SendPropertyChanged("ID_Discipline");
					this.OnID_DisciplineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Teacher", DbType="Int")]
		public System.Nullable<int> ID_Teacher
		{
			get
			{
				return this._ID_Teacher;
			}
			set
			{
				if ((this._ID_Teacher != value))
				{
					if (this._Teachers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TeacherChanging(value);
					this.SendPropertyChanging();
					this._ID_Teacher = value;
					this.SendPropertyChanged("ID_Teacher");
					this.OnID_TeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disciplines_DiscipTeachers", Storage="_Disciplines", ThisKey="ID_Discipline", OtherKey="ID_Discipline", IsForeignKey=true, DeleteRule="CASCADE")]
		public Disciplines Disciplines
		{
			get
			{
				return this._Disciplines.Entity;
			}
			set
			{
				Disciplines previousValue = this._Disciplines.Entity;
				if (((previousValue != value) 
							|| (this._Disciplines.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Disciplines.Entity = null;
						previousValue.DiscipTeachers.Remove(this);
					}
					this._Disciplines.Entity = value;
					if ((value != null))
					{
						value.DiscipTeachers.Add(this);
						this._ID_Discipline = value.ID_Discipline;
					}
					else
					{
						this._ID_Discipline = default(Nullable<int>);
					}
					this.SendPropertyChanged("Disciplines");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_DiscipTeachers", Storage="_Teachers", ThisKey="ID_Teacher", OtherKey="ID_Teacher", IsForeignKey=true, DeleteRule="CASCADE")]
		public Teachers Teachers
		{
			get
			{
				return this._Teachers.Entity;
			}
			set
			{
				Teachers previousValue = this._Teachers.Entity;
				if (((previousValue != value) 
							|| (this._Teachers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teachers.Entity = null;
						previousValue.DiscipTeachers.Remove(this);
					}
					this._Teachers.Entity = value;
					if ((value != null))
					{
						value.DiscipTeachers.Add(this);
						this._ID_Teacher = value.ID_Teacher;
					}
					else
					{
						this._ID_Teacher = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teachers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Education")]
	public partial class Education : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Education;
		
		private string _Name;
		
		private EntitySet<Group> _Group;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_EducationChanging(int value);
    partial void OnID_EducationChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Education()
		{
			this._Group = new EntitySet<Group>(new Action<Group>(this.attach_Group), new Action<Group>(this.detach_Group));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Education", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Education
		{
			get
			{
				return this._ID_Education;
			}
			set
			{
				if ((this._ID_Education != value))
				{
					this.OnID_EducationChanging(value);
					this.SendPropertyChanging();
					this._ID_Education = value;
					this.SendPropertyChanged("ID_Education");
					this.OnID_EducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Education_Group", Storage="_Group", ThisKey="ID_Education", OtherKey="ID_Education")]
		public EntitySet<Group> Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				this._Group.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Group(Group entity)
		{
			this.SendPropertyChanging();
			entity.Education = this;
		}
		
		private void detach_Group(Group entity)
		{
			this.SendPropertyChanging();
			entity.Education = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faculty")]
	public partial class Faculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Faculty;
		
		private string _Name;
		
		private EntitySet<Group> _Group;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_FacultyChanging(int value);
    partial void OnID_FacultyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Faculty()
		{
			this._Group = new EntitySet<Group>(new Action<Group>(this.attach_Group), new Action<Group>(this.detach_Group));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Faculty", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Faculty
		{
			get
			{
				return this._ID_Faculty;
			}
			set
			{
				if ((this._ID_Faculty != value))
				{
					this.OnID_FacultyChanging(value);
					this.SendPropertyChanging();
					this._ID_Faculty = value;
					this.SendPropertyChanged("ID_Faculty");
					this.OnID_FacultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Group", Storage="_Group", ThisKey="ID_Faculty", OtherKey="ID_Faculty")]
		public EntitySet<Group> Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				this._Group.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Group(Group entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Group(Group entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Group;
		
		private string _Name;
		
		private System.Nullable<int> _ID_Faculty;
		
		private System.Nullable<int> _ID_Education;
		
		private EntitySet<Schedule> _Schedule;
		
		private EntitySet<ScheduleException> _ScheduleException;
		
		private EntityRef<Education> _Education;
		
		private EntityRef<Faculty> _Faculty;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_GroupChanging(int value);
    partial void OnID_GroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnID_FacultyChanging(System.Nullable<int> value);
    partial void OnID_FacultyChanged();
    partial void OnID_EducationChanging(System.Nullable<int> value);
    partial void OnID_EducationChanged();
    #endregion
		
		public Group()
		{
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			this._ScheduleException = new EntitySet<ScheduleException>(new Action<ScheduleException>(this.attach_ScheduleException), new Action<ScheduleException>(this.detach_ScheduleException));
			this._Education = default(EntityRef<Education>);
			this._Faculty = default(EntityRef<Faculty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Group", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Group
		{
			get
			{
				return this._ID_Group;
			}
			set
			{
				if ((this._ID_Group != value))
				{
					this.OnID_GroupChanging(value);
					this.SendPropertyChanging();
					this._ID_Group = value;
					this.SendPropertyChanged("ID_Group");
					this.OnID_GroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Faculty", DbType="Int")]
		public System.Nullable<int> ID_Faculty
		{
			get
			{
				return this._ID_Faculty;
			}
			set
			{
				if ((this._ID_Faculty != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_FacultyChanging(value);
					this.SendPropertyChanging();
					this._ID_Faculty = value;
					this.SendPropertyChanged("ID_Faculty");
					this.OnID_FacultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Education", DbType="Int")]
		public System.Nullable<int> ID_Education
		{
			get
			{
				return this._ID_Education;
			}
			set
			{
				if ((this._ID_Education != value))
				{
					if (this._Education.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_EducationChanging(value);
					this.SendPropertyChanging();
					this._ID_Education = value;
					this.SendPropertyChanged("ID_Education");
					this.OnID_EducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Schedule", Storage="_Schedule", ThisKey="ID_Group", OtherKey="ID_Group")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_ScheduleException", Storage="_ScheduleException", ThisKey="ID_Group", OtherKey="ID_Group")]
		public EntitySet<ScheduleException> ScheduleException
		{
			get
			{
				return this._ScheduleException;
			}
			set
			{
				this._ScheduleException.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Education_Group", Storage="_Education", ThisKey="ID_Education", OtherKey="ID_Education", IsForeignKey=true, DeleteRule="CASCADE")]
		public Education Education
		{
			get
			{
				return this._Education.Entity;
			}
			set
			{
				Education previousValue = this._Education.Entity;
				if (((previousValue != value) 
							|| (this._Education.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Education.Entity = null;
						previousValue.Group.Remove(this);
					}
					this._Education.Entity = value;
					if ((value != null))
					{
						value.Group.Add(this);
						this._ID_Education = value.ID_Education;
					}
					else
					{
						this._ID_Education = default(Nullable<int>);
					}
					this.SendPropertyChanged("Education");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Group", Storage="_Faculty", ThisKey="ID_Faculty", OtherKey="ID_Faculty", IsForeignKey=true, DeleteRule="CASCADE")]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Group.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Group.Add(this);
						this._ID_Faculty = value.ID_Faculty;
					}
					else
					{
						this._ID_Faculty = default(Nullable<int>);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_ScheduleException(ScheduleException entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_ScheduleException(ScheduleException entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Location;
		
		private string _Name;
		
		private EntitySet<Auditoriums> _Auditoriums;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_LocationChanging(int value);
    partial void OnID_LocationChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Location()
		{
			this._Auditoriums = new EntitySet<Auditoriums>(new Action<Auditoriums>(this.attach_Auditoriums), new Action<Auditoriums>(this.detach_Auditoriums));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Location", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Location
		{
			get
			{
				return this._ID_Location;
			}
			set
			{
				if ((this._ID_Location != value))
				{
					this.OnID_LocationChanging(value);
					this.SendPropertyChanging();
					this._ID_Location = value;
					this.SendPropertyChanged("ID_Location");
					this.OnID_LocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Auditoriums", Storage="_Auditoriums", ThisKey="ID_Location", OtherKey="ID_Location")]
		public EntitySet<Auditoriums> Auditoriums
		{
			get
			{
				return this._Auditoriums;
			}
			set
			{
				this._Auditoriums.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Auditoriums(Auditoriums entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Auditoriums(Auditoriums entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Periods")]
	public partial class Periods : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Period;
		
		private string _Name;
		
		private EntitySet<Schedule> _Schedule;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PeriodChanging(int value);
    partial void OnID_PeriodChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Periods()
		{
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Period", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Period
		{
			get
			{
				return this._ID_Period;
			}
			set
			{
				if ((this._ID_Period != value))
				{
					this.OnID_PeriodChanging(value);
					this.SendPropertyChanging();
					this._ID_Period = value;
					this.SendPropertyChanged("ID_Period");
					this.OnID_PeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Periods_Schedule", Storage="_Schedule", ThisKey="ID_Period", OtherKey="ID_Period")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Periods = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Periods = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Para;
		
		private System.Nullable<int> _DayWeek;
		
		private System.Nullable<int> _ID_Period;
		
		private System.Nullable<int> _ID_Group;
		
		private System.Nullable<int> _ID_Discipline;
		
		private System.Nullable<int> _ID_Teacher;
		
		private System.Nullable<int> _ID_Auditorium;
		
		private EntityRef<Auditoriums> _Auditoriums;
		
		private EntityRef<Disciplines> _Disciplines;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Periods> _Periods;
		
		private EntityRef<Teachers> _Teachers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParaChanging(System.Nullable<int> value);
    partial void OnParaChanged();
    partial void OnDayWeekChanging(System.Nullable<int> value);
    partial void OnDayWeekChanged();
    partial void OnID_PeriodChanging(System.Nullable<int> value);
    partial void OnID_PeriodChanged();
    partial void OnID_GroupChanging(System.Nullable<int> value);
    partial void OnID_GroupChanged();
    partial void OnID_DisciplineChanging(System.Nullable<int> value);
    partial void OnID_DisciplineChanged();
    partial void OnID_TeacherChanging(System.Nullable<int> value);
    partial void OnID_TeacherChanged();
    partial void OnID_AuditoriumChanging(System.Nullable<int> value);
    partial void OnID_AuditoriumChanged();
    #endregion
		
		public Schedule()
		{
			this._Auditoriums = default(EntityRef<Auditoriums>);
			this._Disciplines = default(EntityRef<Disciplines>);
			this._Group = default(EntityRef<Group>);
			this._Periods = default(EntityRef<Periods>);
			this._Teachers = default(EntityRef<Teachers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Para", DbType="Int")]
		public System.Nullable<int> Para
		{
			get
			{
				return this._Para;
			}
			set
			{
				if ((this._Para != value))
				{
					this.OnParaChanging(value);
					this.SendPropertyChanging();
					this._Para = value;
					this.SendPropertyChanged("Para");
					this.OnParaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayWeek", DbType="Int")]
		public System.Nullable<int> DayWeek
		{
			get
			{
				return this._DayWeek;
			}
			set
			{
				if ((this._DayWeek != value))
				{
					this.OnDayWeekChanging(value);
					this.SendPropertyChanging();
					this._DayWeek = value;
					this.SendPropertyChanged("DayWeek");
					this.OnDayWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Period", DbType="Int")]
		public System.Nullable<int> ID_Period
		{
			get
			{
				return this._ID_Period;
			}
			set
			{
				if ((this._ID_Period != value))
				{
					if (this._Periods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PeriodChanging(value);
					this.SendPropertyChanging();
					this._ID_Period = value;
					this.SendPropertyChanged("ID_Period");
					this.OnID_PeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Group", DbType="Int")]
		public System.Nullable<int> ID_Group
		{
			get
			{
				return this._ID_Group;
			}
			set
			{
				if ((this._ID_Group != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_GroupChanging(value);
					this.SendPropertyChanging();
					this._ID_Group = value;
					this.SendPropertyChanged("ID_Group");
					this.OnID_GroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Discipline", DbType="Int")]
		public System.Nullable<int> ID_Discipline
		{
			get
			{
				return this._ID_Discipline;
			}
			set
			{
				if ((this._ID_Discipline != value))
				{
					if (this._Disciplines.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_DisciplineChanging(value);
					this.SendPropertyChanging();
					this._ID_Discipline = value;
					this.SendPropertyChanged("ID_Discipline");
					this.OnID_DisciplineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Teacher", DbType="Int")]
		public System.Nullable<int> ID_Teacher
		{
			get
			{
				return this._ID_Teacher;
			}
			set
			{
				if ((this._ID_Teacher != value))
				{
					if (this._Teachers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TeacherChanging(value);
					this.SendPropertyChanging();
					this._ID_Teacher = value;
					this.SendPropertyChanged("ID_Teacher");
					this.OnID_TeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Auditorium", DbType="Int")]
		public System.Nullable<int> ID_Auditorium
		{
			get
			{
				return this._ID_Auditorium;
			}
			set
			{
				if ((this._ID_Auditorium != value))
				{
					if (this._Auditoriums.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_AuditoriumChanging(value);
					this.SendPropertyChanging();
					this._ID_Auditorium = value;
					this.SendPropertyChanged("ID_Auditorium");
					this.OnID_AuditoriumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Auditoriums_Schedule", Storage="_Auditoriums", ThisKey="ID_Auditorium", OtherKey="ID_Auditorium", IsForeignKey=true, DeleteRule="CASCADE")]
		public Auditoriums Auditoriums
		{
			get
			{
				return this._Auditoriums.Entity;
			}
			set
			{
				Auditoriums previousValue = this._Auditoriums.Entity;
				if (((previousValue != value) 
							|| (this._Auditoriums.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Auditoriums.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Auditoriums.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._ID_Auditorium = value.ID_Auditorium;
					}
					else
					{
						this._ID_Auditorium = default(Nullable<int>);
					}
					this.SendPropertyChanged("Auditoriums");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disciplines_Schedule", Storage="_Disciplines", ThisKey="ID_Discipline", OtherKey="ID_Discipline", IsForeignKey=true, DeleteRule="CASCADE")]
		public Disciplines Disciplines
		{
			get
			{
				return this._Disciplines.Entity;
			}
			set
			{
				Disciplines previousValue = this._Disciplines.Entity;
				if (((previousValue != value) 
							|| (this._Disciplines.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Disciplines.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Disciplines.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._ID_Discipline = value.ID_Discipline;
					}
					else
					{
						this._ID_Discipline = default(Nullable<int>);
					}
					this.SendPropertyChanged("Disciplines");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Schedule", Storage="_Group", ThisKey="ID_Group", OtherKey="ID_Group", IsForeignKey=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._ID_Group = value.ID_Group;
					}
					else
					{
						this._ID_Group = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Periods_Schedule", Storage="_Periods", ThisKey="ID_Period", OtherKey="ID_Period", IsForeignKey=true, DeleteRule="CASCADE")]
		public Periods Periods
		{
			get
			{
				return this._Periods.Entity;
			}
			set
			{
				Periods previousValue = this._Periods.Entity;
				if (((previousValue != value) 
							|| (this._Periods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Periods.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Periods.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._ID_Period = value.ID_Period;
					}
					else
					{
						this._ID_Period = default(Nullable<int>);
					}
					this.SendPropertyChanged("Periods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_Schedule", Storage="_Teachers", ThisKey="ID_Teacher", OtherKey="ID_Teacher", IsForeignKey=true, DeleteRule="CASCADE")]
		public Teachers Teachers
		{
			get
			{
				return this._Teachers.Entity;
			}
			set
			{
				Teachers previousValue = this._Teachers.Entity;
				if (((previousValue != value) 
							|| (this._Teachers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teachers.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Teachers.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._ID_Teacher = value.ID_Teacher;
					}
					else
					{
						this._ID_Teacher = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teachers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScheduleException")]
	public partial class ScheduleException : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Exception;
		
		private System.Nullable<int> _Para;
		
		private System.Nullable<int> _DayWeek;
		
		private System.Nullable<int> _ID_Group;
		
		private System.Nullable<int> _ID_Discipline;
		
		private System.Nullable<int> _ID_Teacher;
		
		private System.Nullable<int> _ID_Auditorium;
		
		private string _Day;
		
		private EntityRef<Auditoriums> _Auditoriums;
		
		private EntityRef<Disciplines> _Disciplines;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Teachers> _Teachers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ExceptionChanging(int value);
    partial void OnID_ExceptionChanged();
    partial void OnParaChanging(System.Nullable<int> value);
    partial void OnParaChanged();
    partial void OnDayWeekChanging(System.Nullable<int> value);
    partial void OnDayWeekChanged();
    partial void OnID_GroupChanging(System.Nullable<int> value);
    partial void OnID_GroupChanged();
    partial void OnID_DisciplineChanging(System.Nullable<int> value);
    partial void OnID_DisciplineChanged();
    partial void OnID_TeacherChanging(System.Nullable<int> value);
    partial void OnID_TeacherChanged();
    partial void OnID_AuditoriumChanging(System.Nullable<int> value);
    partial void OnID_AuditoriumChanged();
    partial void OnDayChanging(string value);
    partial void OnDayChanged();
    #endregion
		
		public ScheduleException()
		{
			this._Auditoriums = default(EntityRef<Auditoriums>);
			this._Disciplines = default(EntityRef<Disciplines>);
			this._Group = default(EntityRef<Group>);
			this._Teachers = default(EntityRef<Teachers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Exception", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Exception
		{
			get
			{
				return this._ID_Exception;
			}
			set
			{
				if ((this._ID_Exception != value))
				{
					this.OnID_ExceptionChanging(value);
					this.SendPropertyChanging();
					this._ID_Exception = value;
					this.SendPropertyChanged("ID_Exception");
					this.OnID_ExceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Para", DbType="Int")]
		public System.Nullable<int> Para
		{
			get
			{
				return this._Para;
			}
			set
			{
				if ((this._Para != value))
				{
					this.OnParaChanging(value);
					this.SendPropertyChanging();
					this._Para = value;
					this.SendPropertyChanged("Para");
					this.OnParaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayWeek", DbType="Int")]
		public System.Nullable<int> DayWeek
		{
			get
			{
				return this._DayWeek;
			}
			set
			{
				if ((this._DayWeek != value))
				{
					this.OnDayWeekChanging(value);
					this.SendPropertyChanging();
					this._DayWeek = value;
					this.SendPropertyChanged("DayWeek");
					this.OnDayWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Group", DbType="Int")]
		public System.Nullable<int> ID_Group
		{
			get
			{
				return this._ID_Group;
			}
			set
			{
				if ((this._ID_Group != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_GroupChanging(value);
					this.SendPropertyChanging();
					this._ID_Group = value;
					this.SendPropertyChanged("ID_Group");
					this.OnID_GroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Discipline", DbType="Int")]
		public System.Nullable<int> ID_Discipline
		{
			get
			{
				return this._ID_Discipline;
			}
			set
			{
				if ((this._ID_Discipline != value))
				{
					if (this._Disciplines.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_DisciplineChanging(value);
					this.SendPropertyChanging();
					this._ID_Discipline = value;
					this.SendPropertyChanged("ID_Discipline");
					this.OnID_DisciplineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Teacher", DbType="Int")]
		public System.Nullable<int> ID_Teacher
		{
			get
			{
				return this._ID_Teacher;
			}
			set
			{
				if ((this._ID_Teacher != value))
				{
					if (this._Teachers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TeacherChanging(value);
					this.SendPropertyChanging();
					this._ID_Teacher = value;
					this.SendPropertyChanged("ID_Teacher");
					this.OnID_TeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Auditorium", DbType="Int")]
		public System.Nullable<int> ID_Auditorium
		{
			get
			{
				return this._ID_Auditorium;
			}
			set
			{
				if ((this._ID_Auditorium != value))
				{
					if (this._Auditoriums.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_AuditoriumChanging(value);
					this.SendPropertyChanging();
					this._ID_Auditorium = value;
					this.SendPropertyChanged("ID_Auditorium");
					this.OnID_AuditoriumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="NVarChar(50)")]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Auditoriums_ScheduleException", Storage="_Auditoriums", ThisKey="ID_Auditorium", OtherKey="ID_Auditorium", IsForeignKey=true, DeleteRule="CASCADE")]
		public Auditoriums Auditoriums
		{
			get
			{
				return this._Auditoriums.Entity;
			}
			set
			{
				Auditoriums previousValue = this._Auditoriums.Entity;
				if (((previousValue != value) 
							|| (this._Auditoriums.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Auditoriums.Entity = null;
						previousValue.ScheduleException.Remove(this);
					}
					this._Auditoriums.Entity = value;
					if ((value != null))
					{
						value.ScheduleException.Add(this);
						this._ID_Auditorium = value.ID_Auditorium;
					}
					else
					{
						this._ID_Auditorium = default(Nullable<int>);
					}
					this.SendPropertyChanged("Auditoriums");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disciplines_ScheduleException", Storage="_Disciplines", ThisKey="ID_Discipline", OtherKey="ID_Discipline", IsForeignKey=true, DeleteRule="CASCADE")]
		public Disciplines Disciplines
		{
			get
			{
				return this._Disciplines.Entity;
			}
			set
			{
				Disciplines previousValue = this._Disciplines.Entity;
				if (((previousValue != value) 
							|| (this._Disciplines.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Disciplines.Entity = null;
						previousValue.ScheduleException.Remove(this);
					}
					this._Disciplines.Entity = value;
					if ((value != null))
					{
						value.ScheduleException.Add(this);
						this._ID_Discipline = value.ID_Discipline;
					}
					else
					{
						this._ID_Discipline = default(Nullable<int>);
					}
					this.SendPropertyChanged("Disciplines");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_ScheduleException", Storage="_Group", ThisKey="ID_Group", OtherKey="ID_Group", IsForeignKey=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.ScheduleException.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.ScheduleException.Add(this);
						this._ID_Group = value.ID_Group;
					}
					else
					{
						this._ID_Group = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_ScheduleException", Storage="_Teachers", ThisKey="ID_Teacher", OtherKey="ID_Teacher", IsForeignKey=true, DeleteRule="CASCADE")]
		public Teachers Teachers
		{
			get
			{
				return this._Teachers.Entity;
			}
			set
			{
				Teachers previousValue = this._Teachers.Entity;
				if (((previousValue != value) 
							|| (this._Teachers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teachers.Entity = null;
						previousValue.ScheduleException.Remove(this);
					}
					this._Teachers.Entity = value;
					if ((value != null))
					{
						value.ScheduleException.Add(this);
						this._ID_Teacher = value.ID_Teacher;
					}
					else
					{
						this._ID_Teacher = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teachers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teachers")]
	public partial class Teachers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Teacher;
		
		private string _Name;
		
		private EntitySet<DiscipTeachers> _DiscipTeachers;
		
		private EntitySet<Schedule> _Schedule;
		
		private EntitySet<ScheduleException> _ScheduleException;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TeacherChanging(int value);
    partial void OnID_TeacherChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Teachers()
		{
			this._DiscipTeachers = new EntitySet<DiscipTeachers>(new Action<DiscipTeachers>(this.attach_DiscipTeachers), new Action<DiscipTeachers>(this.detach_DiscipTeachers));
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			this._ScheduleException = new EntitySet<ScheduleException>(new Action<ScheduleException>(this.attach_ScheduleException), new Action<ScheduleException>(this.detach_ScheduleException));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Teacher", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Teacher
		{
			get
			{
				return this._ID_Teacher;
			}
			set
			{
				if ((this._ID_Teacher != value))
				{
					this.OnID_TeacherChanging(value);
					this.SendPropertyChanging();
					this._ID_Teacher = value;
					this.SendPropertyChanged("ID_Teacher");
					this.OnID_TeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_DiscipTeachers", Storage="_DiscipTeachers", ThisKey="ID_Teacher", OtherKey="ID_Teacher")]
		public EntitySet<DiscipTeachers> DiscipTeachers
		{
			get
			{
				return this._DiscipTeachers;
			}
			set
			{
				this._DiscipTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_Schedule", Storage="_Schedule", ThisKey="ID_Teacher", OtherKey="ID_Teacher")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_ScheduleException", Storage="_ScheduleException", ThisKey="ID_Teacher", OtherKey="ID_Teacher")]
		public EntitySet<ScheduleException> ScheduleException
		{
			get
			{
				return this._ScheduleException;
			}
			set
			{
				this._ScheduleException.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DiscipTeachers(DiscipTeachers entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = this;
		}
		
		private void detach_DiscipTeachers(DiscipTeachers entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = null;
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = null;
		}
		
		private void attach_ScheduleException(ScheduleException entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = this;
		}
		
		private void detach_ScheduleException(ScheduleException entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = null;
		}
	}
}
#pragma warning restore 1591
